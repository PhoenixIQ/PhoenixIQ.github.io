

https://www.oreilly.com/content/what-is-a-reactive-microservice/
https://coderbee.net/index.php/framework/20161027/1416
https://www.jianshu.com/p/b8fa5a34a735


## 响应式微服务

微服务是当下比较热门的架构思想，本质是把业务拆分成不同的服务，实现服务自力，提倡：解耦、隔离、组合、集成、自主。通常为了实现服务自治，我们需要对某个微服务单独部署。很多优秀的开源框架，像dubbo、Spring Cloud解决了服务通讯、服务发现、限流、熔断、降级等问题。但不代表使用了这些框架开发的服务就一定满足微服务的要求，有时会陷入一些误区当中。

### 微服务的使用误区：

#### 微服务间状态共享

有时虽然拆分了多个服务，但却共用数据库维护服务的状态

#### 微服务内状态共享

微服务间状态自治后，就一定没问题了吗？
微服务设计不是一下就能拆分清楚的，而是持续迭代的，如果在架构初期，对状态的解耦不清晰，这会导致后期微服务的拆分特别困难。

#### 阻塞调用

每个服务。。。。。


这些误区虽然可以再开发时使用思想避免，但是否有更好的设计原则使我们在使用时避免这些误区呢？



#### 响应式微服务
响应式原则（Reactive principles）即一种解决分布式系统的思路，响应式原则也并非一个新的东西，Erlang中的Actor模型即一种响应式设计。响应式原则会要求开发者在设计时实现`逻辑`的松耦合，状态的自治，这很好的约束了开发者在开发微服务时遵循微服务的原则。响应式微服务每个都有一个职责，并通过协议发布其功能。它们是消息驱动的，可以紧密合作而相互合作。这些特征启用了新的开发和部署模式. 响应式使用事件驱动，更贴合DDD设计的事件风暴，事件优先域驱动设计作为DDD的修改而出现，它使对数据依存关系和整个系统的通信建模更加容易。事件是事实，是正在运行的系统中将发生的事情。响应式微服务要求几大原则：

1. 隔离任何东西
2. 自主移动
3. 只做一件事、并且做好
4. 拥有自己的私有状态
5. 拥抱异步消息传输
6. 保持移动，但可寻址


## 有状态服务

Stateless MicroServices VS Stateful MicroServices

无状态应用是当今构建服务公认的解决方案，他有一下几个好处：

1. 应用易于伸缩
2. 应用不必担心状态丢失
3. 。。。。

但是，上面都是基于一个重要的前提，状态持久化了数据库，而数据库在没有性能瓶颈下，可以做到水平伸缩。如果数据库到达了瓶颈，就要面临分库分表。读写分离，缓存等技术的引入。。。
既然如此。


有状态服务的好处：
有状态服务的实现难点：
Phoenix实现有状态的易用性


Application Solutions ...

有状态: stateful services

TODO 应该在这里铺垫好，使用有状态微服务的必要性，和Spring Cloud的对比。

有状态和无状态应用程序之间的主要区别是–

有状态的应用程序会根据当前状态做出反应，而无状态的应用程序会考虑上一个/下一个请求而独立运行。



如果一段时间不使用它，它将自动被钝化以释放资源。启动实体时，它会重放存储的事件以恢复当前状态。这可以是更改的完整历史记录，也可以是从快照开始的记录，这将减少恢复时间。

每个实体仅在一个地方运行，并且可以将消息发送到该实体，而无需发送方知道该实体的位置。只要使用实体，实体就会保持活动状态，并将其当前状态保存在内存中。如果一段时间不使用它，它将自动被钝化以释放资源。启动实体时，它会重放存储的事件以恢复当前状态。这可以是更改的完整历史记录，也可以是从快照开始的记录，这将减少恢复时间。

